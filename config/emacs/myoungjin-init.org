#+TITTLE: Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args :comment yes :result silent

* Repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

* Straight.el
  - I used this package for eyeliner(a modline generator) for the first time
  - this is quite useful when you are using pacakge directly from git repo which is not on elpa yet
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

* Global Settings / Custom Values
#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
  (column-number-mode 1)
  (global-font-lock-mode 1)
  (global-hl-line-mode 1)

  (defcustom work-mode-modeline-preference 'powerline
    "What is your favourite modeilne ('powerline 'doom-modeline 'spaceline)"
    :type '(choice
            (const :tag "Powerline" 'powerline)
            (const :tag "Doom"      'doom-modeline)
            (const :tag "Spaceline" 'spaceline))
    :group 'work-mode)

  (defcustom work-mode-modeline-fallback 'doom-modeline
    "What is your fallback when your preffered modeline is not going to work"
    :type 'string
    :group 'work-mode)


#+END_SRC
** Parenthesis paren-mode
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-style 'parenthesis) ; or expression
(setq show-paren-mismatch t)
(setq show-paren-delay 0)
;; I prefer to use paren-mode
;(setq blink-matching-paren-on-screen t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default major-mode 'text-mode)
(setq-default indent-tabs-mode nil) ; I prefer not to use indent-tabs-mode
(add-hook 'hs-minor-mode-hook (lambda () (diminish 'hs-minor-mode)))
(transient-mark-mode 1)
;(hi-lock-mode (quote on) t)

(require 'whitespace)
(setq whitespace-style '(face empty tabs lines-tail trailing))
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
(eval-after-load "auto-revert"
  '(diminish 'auto-revert-mode))
(eval-after-load "beacon"
  '(diminish 'beacon-mode))
(eval-after-load "ivy"
  '(diminish 'ivy-mode))
(eval-after-load "projectile"
  '(diminish 'projectile-mode))
(eval-after-load "projectile-rails"
  '(diminish 'projectile-rails-mode))
(eval-after-load "rainbow-mode"
  '(diminish 'rainbow-mode))
(eval-after-load "undo-tree"
  '(diminish 'undo-tree-mode))
(eval-after-load "which-key"
  '(diminish 'which-key-mode))
(eval-after-load "flycheck"
  '(diminish 'flycheck-mode))
(eval-after-load "whitespace"
  '(diminish 'whitespace-mode))
;;(eval-after-load "hs-minor"  ; not working
;;  '(diminish 'hs-minor-mode))
(setq eldoc-minor-mode-string (if (display-graphic-p) "ðŸ“š" "Edoc"))
#+END_SRC
* Apperance / Window
** Fonts
   (use-package all-the-icons :ensure t :straight t)
*** TODO : how to inform the user to install fonts via
    =M-x all-the-icons-install-fonts= ???

** Frame Setup (frame, default font)
   - General setup for my preference
   - This frame setup is not for everyone
     Because this will move the frame right-hand side and resize to narrow and long
   - font: Fantasque Sans Mono | all-the-icons
   - gruvbox-theme
#+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
      (if (display-graphic-p) ;; or (window-system)
          ; THEN
          (progn
            (set-scroll-bar-mode nil) ; I used to use 'left
            (tool-bar-mode -1)
            ;; use specific font for Korean charset.
            ;; if you want to use different font size for specific charset,
            ;; add :size POINT-SIZE in the font-spec.
            (create-fontset-from-fontset-spec
             "-CTDB-Fira Code Retina-*-*-*--0-0-0-0-m-0-fontset-fantasque_kr")
            ;; https://github.com/domtronn/all-the-icons.el
            ;; and I modifed a little to use dolist function
            (require 'all-the-icons)
            (dolist (fmname '("all-the-icons"   "file-icons"    "Material Icons"
                              "github-octicons" "FontAwesome"   "Weather Icons"))
              (set-fontset-font "fontset-fantasque_kr" 'unicode
                                (font-spec :family fmname) nil 'append))

            (set-fontset-font "fontset-fantasque_kr" 'unicode
                              (font-spec :name "FantasqueSansMono Nerd Font Mono")
                              nil 'append)
            (set-fontset-font "fontset-fantasque_kr" 'ascii
                              (font-spec :name "Fantasque Sans Mono" :size 14))
            (set-fontset-font "fontset-fantasque_kr" 'hangul
    ;                          (font-spec :name "Noto Sans CJK KR"))
                              (font-spec :name "KoPub Batang"))
            (setq frame-default-left (- (x-display-pixel-width) 698)) ;; 700 when font size is 14
            (if (< (x-display-pixel-height) 698)
                (setq frame-default-height 30)
                (setq frame-default-height 68))
            (setq default-frame-alist
                  '((top . 0) (width . 100)
                    ))
            (add-to-list 'default-frame-alist (cons 'font "fontset-fantasque_kr"))
            (add-to-list 'default-frame-alist (cons 'left frame-default-left))
            (add-to-list 'default-frame-alist (cons 'height frame-default-height))
            (setq initial-frame-alist default-frame-alist)
            )
        ;; ELSE
        ;;; Apply Some theme if on terminal
        (use-package gruvbox-theme
        :ensure t
        :config (load-theme 'gruvbox t)))
#+END_SRC
** Modeline: Powerline vs Doom-modeline vs Spaceline
    * mode-line, modeline (for search)
    * Powerline is fancy Doom-modeline looks clean but needs some fonts installed
   
*** DONE spaceline not working on terminal -> going back to fallback modeline
#+BEGIN_SRC emacs-lisp
  (let ((setting-modeline? t) (curr-ml work-mode-modeline-preference)
        (fallback-ml work-mode-modeline-fallback) (max-try 10))
    (while (and setting-modeline? (> max-try 0))
      (setq max-try (1- max-try))
      (catch 'modeline-switch
        (cond
         ((eq curr-ml 'powerline)
          (use-package powerline :ensure t :straight t)
          (use-package airline-themes
            :ensure t
            :config (load-theme 'airline-gruvbox-dark t))
          (setq setting-modeline? nil))

         ((eq curr-ml 'doom-modeline)
          (use-package doom-modeline
            :ensure t
            :defer t
            :hook (after-init . doom-modeline-mode))
          (setq setting-modeline? nil))

         ((eq curr-ml 'spaceline)
          (unless (display-graphic-p)
            (message "your preffered modelines 'spaceline is not working on terminal: going back to: %s" fallback-ml)
            (setq curr-ml fallback-ml)
            (throw 'modeline-switch fallback-ml))

            (use-package eyeliner
              :ensure t
              :straight (eyeliner :type git
                                  :host github
                                  :repo "dustinlacewell/eyeliner")
              :config
              (progn
                ; spaceline + eyeliner will complain without it
                (autoload 'projectile-project-p "projectile")
                (require 'eyeliner)
                (eyeliner/install)))
            (setq setting-modeline? nil))))))
#+END_SRC

** Not So MiniBuffer
#+BEGIN_SRC emacs-lisp
  (setq resize-mini-windows nil) ; set nil to keep size after resizing minibuffer
  (defun resize-minibuffer-window (&optional greeting-message)
    (interactive) ; needed because we will use inside global-set-key as well
    (let* ((minibuffer-orig-height (window-size (minibuffer-window)))
           (minibuffer-new-height 6)
           (delta (- minibuffer-new-height minibuffer-orig-height))
           )

      (window-resize (minibuffer-window) delta)
      (when greeting-message (message "Have a nice one. ;^]"))))

  (add-hook 'window-setup-hook (lambda ()
                                 (resize-minibuffer-window t)))
  (add-hook 'after-change-major-mode-hook (lambda ()
                                            (resize-minibuffer-window)) nil t)

  (global-set-key (kbd "C-l") (lambda()
                                (interactive) ; without this emacs will complain
                                (redraw-display)
                                (resize-minibuffer-window)))
#+END_SRC
** Ace-window (window management)
#+BEGIN_SRC emacs-lisp
  ;; copyright: https://github.com/zamansky/using-emacs/blob/master/myinit.org
  (use-package ace-window :ensure t
    :init
    (progn
      (setq aw-scope 'global) ;; was frame
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))

#+END_SRC

* Keyboard / Cursor / Shortcuts
** Input Method (Korean)
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "korean-hangul3")
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :straight t
    :bind (("C-c p f" . projectile-find-file)
           ("C-c p p" . projectile-switch-project)
           ("C-c p t" . projectile-find-test-file))
    :config
    (progn
      (setq projectile-enable-caching t)
      (add-hook 'prog-mode-hook 'projectile-mode)))
#+END_SRC

#+RESULTS:
: projectile-find-test-file

** Key-bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-X C-X") 'save-buffers-kill-emacs)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
** Avy-mode
   - [[https://github.com/abo-abo/avy]]
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :config
  (progn
    ; I use emacs in termial many times but `C-:' doesn't seem to work
    (global-set-key (kbd "M-:") 'avy-goto-char-timer)
    (setq avy-timeout-seconds 0.35)
    ; "You can actually replace the M-g g binding of goto-line,
    ; since if you enter a digit for avy-goto-line, it will switch to
    ; goto-line with that digit already entered."
    (global-set-key (kbd "M-g g") 'avy-goto-line)))
#+END_SRC

** Fold-dwim
#+BEGIN_SRC emacs-lisp
(use-package fold-dwim :ensure t
  :config (progn
            (global-set-key (kbd "C-]")     'fold-dwim-toggle)
            (global-set-key (kbd "C-x [")    'fold-dwim-hide-all)
            (global-set-key (kbd "C-x ]")    'fold-dwim-show-all) ))

;;(hideshowvis-symbols)
#+END_SRC
** My Own Key map
#+BEGIN_SRC emacs-lisp
  (defun myoungjin/load-file (org-file)
      "open file if exists"
    (interactive)
    (setq org-file-path (expand-file-name org-file))
    (if (file-exists-p org-file-path)
        (find-file org-file-path)
        (message "myoungjin/load-file: %s failed" org-file)))

  (define-prefix-command 'myoungjin-map)
  (global-set-key (kbd "C-c m") 'myoungjin-map)
#+END_SRC
** Open Some Memo
#+BEGIN_SRC emacs-lisp
  (define-key myoungjin-map (kbd "o") 'ace-window)
  (define-key myoungjin-map (kbd "m")
    (lambda () nil (interactive) (myoungjin/load-file "~/proj/.code-memo.org")))
  (define-key myoungjin-map (kbd "i")
    (lambda () nil (interactive)
      (myoungjin/load-file (concat user-emacs-directory
                                   "myoungjin-init.org"))))
#+END_SRC
* Work-mode for me
  I don't think that it is good habit to make minor mode is on globally
  so I make an mode to enable some useful stuff
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory
                                (convert-standard-filename "my-lisp/")))
(add-to-list 'load-path (concat user-emacs-directory
                                (convert-standard-filename "our-lisp/")))

(require 'common-allow-deny-rule) ; my-lisp

(defcustom work-mode-allowed-modes '(prog-mode emacs-lisp-mode text-mode)
  "Major modes on which to enable the display-line-numbers mode and whitespace mode and so on"
  :group 'work-mode
  :type 'list
  :version "green")

(defcustom work-mode-exempt-modes
  '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
  "Major modes on which to disable the work-mode"
  :group 'work-mode
  :type 'list
  :version "green")

(defcustom work-mode-allowed-modes-include-derived-mode 't
  "Extends enabling work-mode through all the derived mode from work-mode-allowed mode"
  :group 'work-mode
  :type 'boolean
  :version "green")

(defun work-mode ()
  "turn on some usuful minor mode like display-line-numbers and whitespace"
  (let (work-mode-ready? res on-or-off derived-mode-check-function)
    (setq work-mode-ready? nil)
    (setq derived-mode-check-function
          (if work-mode-allowed-modes-include-derived-mode
              (lambda (candi given-mode) ; candi is actually not used here
                (derived-mode-p given-mode))
            nil))
    (setq res (common-allow-deny-rule-apply major-mode
                                            work-mode-allowed-modes
                                            derived-mode-check-function))
    (setq work-mode-ready? (if (eq (car res) 'allowed) t nil))
      ;;(let (status stage)
      ;;  (setq status (car res))
      ;;  (setq stage  (car (cdr res))) ;; not used
      ;;  (setq work-mode-ready? (if (eq status 'allowed) t nil))
    ;; Do real configuration goes here
    (setq on-or-off (if work-mode-ready? 1 0))
    (display-line-numbers-mode  on-or-off)
    (whitespace-mode            on-or-off)
    (prettify-symbols-mode      on-or-off)))

(add-hook 'after-change-major-mode-hook 'work-mode)
#+END_SRC
* General Programming
** Prettify-Symbols-mode
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-alist '(("lambda" . 955)
                                 ("->" . 8594)    ; â†’
                                 ("=>" . 8658)    ; â‡’
                                 ("map" . 8614)   ; â†¦
                                 ))
#+END_SRC

** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :hook ((prog-mode text-mode conf-mode) . highlight-indent-guides-mode)
    :init
    (setq highlight-indent-guides-method 'character)
    :config
    (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces)
    ;; `highlight-indent-guides' breaks in these modes
    (add-hook 'org-indent-mode-hook
      (defun +indent-guides-disable-maybe-h ()
        (when highlight-indent-guides-mode
          (highlight-indent-guides-mode -1)))))
#+END_SRC
* IBuffer
#+BEGIN_SRC emacs-lisp
;; note: if you're using screen and your escape key is "C-[Bb]",
;; you need to type "C-x C-b b"
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org"   (name . "^.*org"))
               ("perl"  (or
                         (mode . raku-mode)
                         (mode . cperl-mode)))
               ("programing" (or
                               (mode . python-mode)
                               (mode . c++-mode)
                               (mode . shellscript-mode)
                               (mode . fish-mode)))
               ("emacs" (or
                         (filename . "/\\bemacs\\b*/")
                         (name . "^\\*.*\\*$"))) ))))

(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

;; don't show if name starts with double asterik "**blah~"
(require 'ibuf-ext)
(add-to-list 'ibuffer-never-show-predicates "^\\*\\*")
;; don't show filter groups if there are no buffers in that group
(setq ibuffer-show-empty-filter-groups nil)

;; Dont ask for firmation to delete marked buffers
(setq ibuffer-expert t)

(setq indo-enable-flex-match t)
(setq ido-everywhere t)
(ido-mode 1)
(defalias 'list-buffers 'ibuffer)
; or change the binding
;(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
* Org-mode
** Some abbreviation
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist '("SE" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

#+END_SRC
** Todo Keywords
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+END_SRC

* Programming, Editing
** Saveplace
   automatically save last edit place
#+BEGIN_SRC emacs-lisp
(require 'saveplace)
(setq save-place-file "~/.config/emacs/places")
(setq save-place-forget-unreadable-files nil)
(save-place-mode 1)
#+END_SRC

** Display line numbers
#+BEGIN_SRC emacs-lisp
(require 'display-line-numbers)
(setq display-line-numbers t)
(setq display-line-numbers-type t) ; setting display-line-numbers isn't enough

(setq display-line-numbers-current-absoulte t)

(defcustom display-line-numbers-allowed-on-starred-buffers 'nil
  "Disable buffers that have stars in them like *Gnu Emacs*"
  :type 'boolean
  :group 'display-line-numbers)

(defun display-line-numbers--turn-on ()
  "turn on line numbers in `display-line-numbers-allowed-modes' but excluding
certain major modes defined in `display-line-numbers-exempt-modes'"
  (if (or display-line-numbers-allowed-on-starred-buffers
          (not string-match "*" (buffer-name)))
      (display-line-numbers-mode 1)
    (display-line-numbers-mode 0)))
#+END_SRC
** More language modes
#+BEGIN_SRC emacs-lisp
(use-package raku-mode :ensure t :defer t)
(use-package fish-mode :ensure t :defer t)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :init (add-hook 'prog-mode-hook 'flycheck-mode))

(use-package flycheck-perl6 :ensure t)
#+END_SRC
** Auto-complete
#+BEGIN_SRC emacs-lisp
;; https://cestlaz.github.io/posts/using-emacs-8-autocomplete/
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t) ))

(add-to-list 'ac-modes 'raku-mode)
#+END_SRC
** Swiper / Counsel
   - [[https://cestlaz.github.io/posts/using-emacs-6-swiper/]]
#+BEGIN_SRC emacs-lisp
(use-package counsel :ensure t )

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 7)
    (setq ivy-fixed-height-minibuffer nil)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* Dired / Listing / Bookmarks
** Open Bookmark by Default
#+BEGIN_SRC emacs-lisp
;;; open bookmark when emacs is running withougt visiting a file.
;;  note: it is not working when emacs is running as daemon
(defun make-initial-buffer-as-bookmark-if-no-file-visited ()
  (let ((no-file-visited t)
        (args command-line-args))
    (dolist (arg (cdr args))
      (progn
        (if (file-exists-p arg)
            (setq no-file-visited nil))))
    (when no-file-visited
      (bookmark-bmenu-list) ;; create a book mark buffer first
      (setq initial-buffer-choice (lambda ()(get-buffer "*Bookmark List*"))))))

(add-hook 'after-init-hook
          (lambda () (make-initial-buffer-as-bookmark-if-no-file-visited)))
#+END_SRC

** All-the-icons-Dired
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
  (use-package treemacs-icons-dired
    :ensure t
    :config
    (progn
      (require 'dired)
      (if (display-graphic-p)
          (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode))))
#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
              treemacs-deferred-git-apply-delay      0.5
              treemacs-directory-name-transformer    #'identity
              treemacs-display-in-side-window        t
              treemacs-eldoc-display                 t
              treemacs-file-event-delay              5000
              treemacs-file-extension-regex          treemacs-last-period-regex-value
              treemacs-file-follow-delay             0.2
              treemacs-file-name-transformer         #'identity
              treemacs-follow-after-init             t
              treemacs-git-command-pipe              ""
              treemacs-goto-tag-strategy             'refetch-index
              treemacs-indentation                   2
              treemacs-indentation-string            " "
              treemacs-is-never-other-window         nil
              treemacs-max-git-entries               5000
              treemacs-missing-project-action        'ask
              treemacs-move-forward-on-expand        nil
              treemacs-no-png-images                 nil
              treemacs-no-delete-other-windows       t
              treemacs-project-follow-cleanup        nil
              treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-position                      'left
              treemacs-recenter-distance             0.1
              treemacs-recenter-after-file-follow    nil
              treemacs-recenter-after-tag-follow     nil
              treemacs-recenter-after-project-jump   'always
              treemacs-recenter-after-project-expand 'on-distance
              treemacs-show-cursor                   nil
              treemacs-show-hidden-files             t
              treemacs-silent-filewatch              nil
              treemacs-silent-refresh                nil
              treemacs-sorting                       'alphabetic-asc
              treemacs-space-between-root-nodes      t
              treemacs-tag-follow-cleanup            t
              treemacs-tag-follow-delay              1.5
              treemacs-user-mode-line-format         nil
              treemacs-user-header-line-format       nil
              treemacs-width                         35)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        (treemacs-resize-icons 18)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null treemacs-python-executable)))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

  ;  (use-package treemacs-evil
  ;    :after treemacs evil
  ;    :ensure t)

    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)

    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)

    (use-package treemacs-persp
      :after treemacs persp-mode
      :ensure t
      :config (treemacs-set-scope-type 'Perspectives))
#+END_SRC

* Misc / Testing
** Beacon
#+BEGIN_SRC emacs-lisp
    (unless (display-graphic-p) ;; it is buggy with my X-window setup
        (use-package beacon :ensure t
          :config
          (progn
          (beacon-mode 1)
          (setq beacon-blink-when-buffer-changes t)
          (setq beacon-blink-when-focused t))))
#+END_SRC
** Tabbar
#+BEGIN_SRC emacs-lisp
(use-package tabbar
  :ensure t
  :config (progn
            (tabbar-mode 1)
            (global-set-key (kbd "C-c C-j") 'tabbar-backward)
            (global-set-key (kbd "C-c C-k") 'tabbar-forward)
            (global-set-key (kbd "C-c C-p") 'tabbar-backward-group)
            (global-set-key (kbd "C-c C-n") 'tabbar-forward-group)))
#+END_SRC
** Neo-tree
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config (progn
            (setq neo-smart-open t)
            (setq neo-window-fixed-size nil)
            (global-set-key [f8] 'neotree-toggle)))
;;    (evil-leader/set-key
;;     "tt" 'neotree-toggle
;;           "tp" 'neotree-projectile-action)))
#+END_SRC
** Nov-mode
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :ensure t
    :init
    (defun my-nov-font-setup ()
      (face-remap-add-relative
      'variable-pitch '(:family "Bookerly" :height 1.3)))
    :config
    (progn
      (setq nov-text-width t)
      (setq visual-fill-column-center-text t)
      (add-hook 'nov-mode-hook (lambda () (visual-line-mode)))
      (if (display-graphic-p)
          (add-hook 'nov-mode-hook 'my-nov-font-setup))
      (add-to-list 'auto-mode-alist '("\\.epub\$" . nov-mode))))
#+END_SRC
** Image size
#+BEGIN_SRC emacs-lisp
(setq max-image-size "no limit??")
#+END_SRC
** Visual-line-mode
   - this is from [[https://www.emacswiki.org/emacs/VisualLineMode]]
#+BEGIN_SRC emacs-lisp
  (defvar visual-wrap-column nil)

  (defun set-visual-wrap-column (new-wrap-column &optional buffer)
    "Force visual line wrap at NEW-WRAP-COLUMN in BUFFER (defaults
  to current buffer) by setting the right-hand margin on every
  window that displays BUFFER.  A value of NIL or 0 for
  NEW-WRAP-COLUMN disables this behavior."
    (interactive (list (read-number "New visual wrap column, 0 to disable: " (or visual-wrap-column fill-column 0))))
    (if (and (numberp new-wrap-column)
             (zerop new-wrap-column))
      (setq new-wrap-column nil))
    (with-current-buffer (or buffer (current-buffer))
      (visual-line-mode t)
      (set (make-local-variable 'visual-wrap-column) new-wrap-column)
      (add-hook 'window-configuration-change-hook 'update-visual-wrap-column nil t)
      (let ((windows (get-buffer-window-list)))
        (while windows
          (when (window-live-p (car windows))
            (with-selected-window (car windows)
              (update-visual-wrap-column)))
          (setq windows (cdr windows))))))

  (defun update-visual-wrap-column ()
    (if (not visual-wrap-column)
      (set-window-margins nil nil)
      (let* ((current-margins (window-margins))
             (right-margin (or (cdr current-margins) 0))
             (current-width (window-width))
             (current-available (+ current-width right-margin)))
        (if (<= current-available visual-wrap-column)
          (set-window-margins nil (car current-margins))
          (set-window-margins nil (car current-margins)
                              (- current-available visual-wrap-column))))))
#+END_SRC

* Experiment
  - hide some minor mode
  [[https://emacs.stackexchange.com/questions/3925/hide-list-of-minor-modes-in-mode-line/3928#comment5928_3928]]
#+BEGIN_SRC emacs-lisp
(defvar hidden-minor-modes ; example, write your own list of hidden
  '(abbrev-mode            ; minor modes
    auto-fill-function
    auto-complete-mode
;    flycheck-mode
;    flyspell-mode
;    inf-haskell-mode
;    haskell-indent-mode
;    haskell-doc-mode
    smooth-scroll-mode))

(defun purge-minor-modes ()
  (interactive)
  (dolist (x hidden-minor-modes nil)
    (let ((trg (cdr (assoc x minor-mode-alist))))
      (when trg
        (setcar trg "")))))

(add-hook 'after-change-major-mode-hook 'purge-minor-modes)

#+END_SRC
))
